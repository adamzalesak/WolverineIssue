using Oakton;
using Wolverine;
using WolverineOutboxIssue.Messages;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Host.UseWolverine(opts =>
{
    opts.PublishMessage<TestMessage>().ToLocalQueue("queue1");
    opts.PublishMessage<TestMessage>().ToLocalQueue("queue2");
    opts.PublishMessage<TestMessage>().ToLocalQueue("queue3");

    opts.PublishMessage<TestEvent>().ToLocalQueue("event1");
    opts.PublishMessage<TestEvent>().ToLocalQueue("event2");
    opts.PublishMessage<TestEvent>().ToLocalQueue("event3");
});

var app = builder.Build();

app.UseSwagger();
app.UseSwaggerUI();
app.UseHttpsRedirection();

// issue #1
// expected behavior:
// * Event1Handler is called once (sticky handler with queue1)
// * Event2Handler and Event3Handler are called twice (no sticky attribute, so it handles all queues without
// any sticky handler (queue2 and queue3) - not ideal IMHO but I suppose this is the current expected behavior)
// * code calling all handlers is generated by "-- codegen write"
//
// actual behavior:
// * Event1Handler is called 3 times - NOT OK
// * Event2Handler and Event3Handler are both called 2 times - OK
// * code calling Event1Handler is not generated by "-- codegen write" - NOT OK
app.MapPost("/testEvent", async (IMessageBus bus) => await bus.PublishAsync(new TestEvent()));

// issue #2
// expected behavior:
// * Message1Handler and Message2Handler called sequentially by a single generated class (both sticky with queue1)
// * Message3Handler called twice (queue2 and queue3)
// * "-- codegen write" generates code for all handlers
//
// actual behavior:
// * Message1Handler called once, Message2Handler not called at all - NOT OK
// * Message3Handler called twice - OK
// * If the load mode is TypeLoadMode.Auto, the code is generated at runtime but "-- codegen write"
// generates code only for Message3Handler -> leads to app crash if TypeLoadMode.Static (the same issue as in #1)
app.MapPost("/test", async (IMessageBus bus) => await bus.PublishAsync(new TestMessage()));

// issue #3 AbcHandler is not discovered with this exact name. If the handler is renamed, it works as expected.
app.MapPost("/abc", async (IMessageBus bus) => await bus.PublishAsync(new AbcMessage()));

return await app.RunOaktonCommands(args);